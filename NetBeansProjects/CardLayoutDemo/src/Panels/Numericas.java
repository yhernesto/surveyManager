/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Panels;

import InterfaceClasses.ModelTable;
import InterfaceClasses.NonEditableModel;
import InterfaceClasses.RowTable;
import InterfaceClasses.Table;
import java.awt.GridBagLayout;
import java.awt.KeyboardFocusManager;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JLabel;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;
import static jxl.CellReferenceHelper.getColumnReference;
import jxl.Sheet;
import jxl.Workbook;
import jxl.read.biff.BiffException;
import layout.GeneratorControllerInterface;
import layout.GeneratorModelInterface;

/**
 *
 * @author ernesto
 */
public class Numericas extends javax.swing.JPanel {


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        excelTable = new javax.swing.JTable();
        scrollPane = new javax.swing.JScrollPane();
        addButton = new javax.swing.JButton();
        removeButton = new javax.swing.JButton();

        excelTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(excelTable);

        addButton.setText("+");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        removeButton.setText("-");
        removeButton.setMaximumSize(new java.awt.Dimension(40, 31));
        removeButton.setMinimumSize(new java.awt.Dimension(40, 31));
        removeButton.setPreferredSize(new java.awt.Dimension(40, 31));
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(scrollPane)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(addButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(removeButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 388, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(16, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scrollPane)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(addButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(removeButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 108, Short.MAX_VALUE)))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_addButtonActionPerformed

    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_removeButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JTable excelTable;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton removeButton;
    private javax.swing.JScrollPane scrollPane;
    // End of variables declaration//GEN-END:variables
    private Table questionTable;
    private ModelTable questionModelTable;
    private GeneratorControllerInterface gci;
    private GeneratorModelInterface gmi;

    /**
     * Creates new form Numerica
     * 
     */
    public Numericas() {
        initComponents();
        myInitComponentes();
    }

    private void myInitComponentes() {
//        gmi = new GeneratorModelInterface();
        
        questionModelTable   =   new ModelTable();
        questionModelTable.mustNotBeEmpty(true);
        questionModelTable.setMaxRows(10);
        
        /*de la nueva tabla */
        excelTable  = new JTable();
        excelTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        excelTable.setAutoscrolls(false);
        excelTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                excelTable1MouseClicked(evt);
            }
        });
        NonEditableModel model = new NonEditableModel();
        excelTable.setModel(model);
        excelTable = loadExcelTable(excelTable, gmi.getExcelPath());
        
        jScrollPane1.setViewportView(excelTable);
        
        /**************** QUESTION TABLE ******************/

        questionModelTable.addRowTable(createRowTable(questionModelTable.getTotalRows()));
        
        questionTable    =  new Table(questionModelTable);
        questionTable.setLayout(new GridBagLayout());        
        questionTable.updateTable(questionModelTable);
        
        scrollPane.add(questionTable);
        scrollPane.setViewportView(questionTable);
       /***************************************************/
    }
    
    public JTable loadExcelTable(JTable excelTable, String path) {
        
            excelTable.setFocusable(false);
            excelTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
            
            excelTable.setCellSelectionEnabled(true);
            NonEditableModel model = (NonEditableModel) excelTable.getModel();
        try {
            File file = new File(path);
            Workbook excel  = Workbook.getWorkbook(file);
            Sheet hoja      = excel.getSheet(0);
            int columns     = hoja.getColumns();
            int rows       = hoja.getRows();            
            String  data    = null;
            
            if(rows >= 10) rows = 10;       //If the excel has more than 10 rows then we show 10 rows 
            
            for(int i=0; i < columns; i++){
                model.addColumn(getColumnReference(i));
            }
            
            for(int f = 0; f < rows; f++){
                model.addRow(new Object[0]);
                for(int c = 0; c < 10; c++){
                    data   = hoja.getCell(c,f).getContents();
                    model.setValueAt(data, f, c);
                };
            }
            
            
        } catch (IOException ex) {
            Logger.getLogger(Numericas.class.getName()).log(Level.SEVERE, null, ex);
        } catch (BiffException ex) {
            Logger.getLogger(Numericas.class.getName()).log(Level.SEVERE, null, ex);
        }
        return excelTable;
    }
    
    private void excelTable1MouseClicked(java.awt.event.MouseEvent evt){
        int row = excelTable.rowAtPoint(evt.getPoint());
        int col = excelTable.columnAtPoint(evt.getPoint());

        if(JTextField.class == KeyboardFocusManager.getCurrentKeyboardFocusManager().getFocusOwner().getClass()){
            JTextField text = (JTextField) KeyboardFocusManager.getCurrentKeyboardFocusManager().getFocusOwner();
            text.setText((String) excelTable.getValueAt(row, col));
        };
    }
    
    private RowTable createRowTable(int tableSize){
        JLabel  questionNumber  = new JLabel("Pregunta "+ Integer.toString(tableSize) + ":");
        JTextField question = new JTextField();
        question.setColumns(20);
        
        RowTable row    = new RowTable();
        row.addComponent(questionNumber);
        row.addComponent(question);
        
        return row;
    }
}
